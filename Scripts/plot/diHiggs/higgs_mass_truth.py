import pandas as pd
# hdf_signal = pd.read_hdf('/afs/f9.ijs.si/home/jakobn/DNN-plots/HHbbWW_neu60hid4/HHbbWW83904_eval.calibrated.h5')
# hdf_ttbar = pd.read_hdf('/afs/f9.ijs.si/home/jakobn/DNN-plots/ttbar_neu60hid4/ttbar145013_train.calibrated.h5')
# hdf_signal = pd.read_hdf('/afs/f9.ijs.si/home/jakobn/DNN-plots/HHbbWW_noeventmass_reco/signal.calibrated.h5')
# hdf_ttbar = pd.read_hdf('/afs/f9.ijs.si/home/jakobn/DNN-plots/HHbbWW_noeventmass_reco/ttbar.calibrated.h5')
# hdf_signal = pd.read_hdf('/afs/f9.ijs.si/home/jakobn/DNN-plots/eval/HHbbWW129847_train.calibrated.h5')
# hdf_ttbar = pd.read_hdf('/afs/f9.ijs.si/home/jakobn/DNN-plots/eval/ttbar145013_train.calibrated.h5')
# hdf_res = pd.read_hdf('/afs/f9.ijs.si/home/jakobn/DNN-plots/HHbbWW_truth_res/truth_res_63946_eval.calibrated.h5')
# hdf_signal = pd.read_hdf('/afs/f9.ijs.si/home/jakobn/DNN-plots/HHbbWW_noeventmass_reco/signal.calibrated.h5')
# hdf_ttbar = pd.read_hdf('/afs/f9.ijs.si/home/jakobn/DNN-plots/HHbbWW_noeventmass_reco/ttbar.calibrated.h5')

hdf_res = pd.read_hdf('/afs/f9.ijs.si/home/jakobn/DNN-plots/HHbbWW_final_truth/truth_res_63946_eval.calibrated.h5')
hdf_signal = pd.read_hdf('/afs/f9.ijs.si/home/jakobn/DNN-plots/HHbbWW_final_truth/truth_nonres_159805_eval.calibrated.h5')
hdf_ttbar = pd.read_hdf('/afs/f9.ijs.si/home/jakobn/DNN-plots/HHbbWW_final_truth/truth_ttbar_145013_eval.calibrated.h5')

higgs_mass_signal = hdf_signal.eval('sqrt((q_fin_E1 + q_fin_E2 + l_E + sqrt(hid4neu60_pred**2 + v_l_px**2 + v_l_py**2))**2 - (q_fin_px1 + q_fin_px2 + l_px + v_l_px)**2 - (q_fin_py1 + q_fin_py2 + l_py + v_l_py)**2 - (q_fin_pz1 + q_fin_pz2 + l_pz + hid4neu60_pred)**2)')
higgs_mass_res = hdf_res.eval('sqrt((q_fin_E1 + q_fin_E2 + l_E + sqrt(hid4neu60_pred**2 + v_l_px**2 + v_l_py**2))**2 - (q_fin_px1 + q_fin_px2 + l_px + v_l_px)**2 - (q_fin_py1 + q_fin_py2 + l_py + v_l_py)**2 - (q_fin_pz1 + q_fin_pz2 + l_pz + hid4neu60_pred)**2)')
higgs_mass_ttbar = hdf_ttbar.eval('sqrt((q_fin_E1 + q_fin_E2 + l_E + sqrt(hid4neu60_pred**2 + v_l_px**2 + v_l_py**2))**2 - (q_fin_px1 + q_fin_px2 + l_px + v_l_px)**2 - (q_fin_py1 + q_fin_py2 + l_py + v_l_py)**2 - (q_fin_pz1 + q_fin_pz2 + l_pz + hid4neu60_pred)**2)')
w_mass_signal = hdf_signal.eval('sqrt((l_E + sqrt(hid4neu60_pred**2 + v_l_px**2 + v_l_py**2))**2 - (l_px + v_l_px)**2 - (l_py + v_l_py)**2 - (l_pz + hid4neu60_pred)**2)')
w_mass_res = hdf_res.eval('sqrt((l_E + sqrt(hid4neu60_pred**2 + v_l_px**2 + v_l_py**2))**2 - (l_px + v_l_px)**2 - (l_py + v_l_py)**2 - (l_pz + hid4neu60_pred)**2)')
w_mass_ttbar = hdf_ttbar.eval('sqrt((l_E + sqrt(hid4neu60_pred**2 + v_l_px**2 + v_l_py**2))**2 - (l_px + v_l_px)**2 - (l_py + v_l_py)**2 - (l_pz + hid4neu60_pred)**2)')

import matplotlib.pyplot as plt
import numpy as np

fig_higgs = plt.figure(1)
plt.hist(higgs_mass_signal,np.arange(0,600,6), color = (0.85, 0.15, 0), label='non-res', density=True, histtype='step', linewidth=1.5)
plt.hist(higgs_mass_res,np.arange(0,600,6), label='resonant 2 TeV', density=True, histtype='step', linewidth=1.5)
plt.hist(higgs_mass_ttbar,np.arange(0,600,6), color = 'g', label='ttbar', density=True, histtype='step', linewidth=1.5)
plt.legend(loc='upper right', ncol=3, fancybox=True, fontsize='small')
plt.xlabel('$m_{WW}$ [GeV]')
plt.ylabel('Normalized distribution')
plt.title('Reconstructed $m_{WW}$')
fig_higgs.savefig('higgs_mass_reco.pdf')

fig_w = plt.figure(2)
plt.hist(w_mass_signal,np.arange(0,300,3), color = (0.85, 0.15, 0), label='non-res', density=True, histtype='step', linewidth=1.5)
plt.hist(w_mass_res,np.arange(0,300,3), label='resonant 2 TeV', density=True, histtype='step', linewidth=1.5)
plt.hist(w_mass_ttbar,np.arange(0,300,3), color = 'g', label='ttbar', density=True, histtype='step', linewidth=1.5)
plt.legend(loc='upper right', ncol=3, fancybox=True, fontsize='small')
plt.xlabel('$m_W$ [GeV]')
plt.ylabel('Normalized distribution')
plt.title('Reconstructed $m_W$')
fig_w.savefig('w_mass_reco.pdf')

abs_signal = hdf_signal.eval('hid4neu60_pred - v_l_pz')
abs_ttbar = hdf_ttbar.eval('hid4neu60_pred - v_l_pz')
abs_res = hdf_res.eval('hid4neu60_pred - v_l_pz')
rel_signal = hdf_signal.eval('(hid4neu60_pred - v_l_pz)/v_l_pz')
rel_ttbar = hdf_ttbar.eval('(hid4neu60_pred - v_l_pz)/v_l_pz')
rel_res = hdf_res.eval('(hid4neu60_pred - v_l_pz)/v_l_pz')

fig_abs_err = plt.figure(3)
plt.hist(abs_signal,np.arange(-200,200,4), alpha=0.5, label='signal', density=True)
plt.hist(abs_res,np.arange(-200,200,4), alpha=0.5, label='resonant 2 TeV', density=True)
plt.hist(abs_ttbar,np.arange(-200,200,4), alpha=0.5, label='ttbar', density=True)
plt.legend(loc='upper right', ncol=3, fancybox=True, fontsize='small')
plt.xlabel('$p_{z \,\,reco} - p_{z \,\,truth}$ [GeV]')
plt.ylabel('Normalized distribution')
plt.title('Absolute error')
fig_abs_err.savefig('abs_error.pdf')

fig_rel_err = plt.figure(4)
plt.hist(rel_signal,np.arange(-4,2,0.06), alpha=0.5, label='signal', density=True)
plt.hist(rel_res,np.arange(-4,2,0.06), alpha=0.5, label='resonant 2 TeV', density=True)
plt.hist(rel_ttbar,np.arange(-4,2,0.06), alpha=0.5, label='ttbar', density=True)
plt.legend(loc='upper right', ncol=3, fancybox=True, fontsize='small')
plt.xlabel('$(p_{z \,\,reco} - p_{z \,\,truth})/p_{z \,\,truth}$')
plt.ylabel('Normalized distribution')
plt.title('Relative error')
plt.show()
fig_rel_err.savefig('rel_error.pdf')